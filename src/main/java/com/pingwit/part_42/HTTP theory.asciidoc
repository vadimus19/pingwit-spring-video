= HTTP

HTTP (Hypertext Transfer Protocol, протокол передачи гипертекста) — это основной протокол, используемый в сети Интернет для передачи данных между веб-серверами и клиентами, такими как веб-браузеры. Он был разработан в начале 1990-х годов Тимом Бернерс-Ли и является одним из столпов Всемирной паутины (WWW). Основные аспекты HTTP включают его архитектуру, методы, коды состояния и безопасность.

В соответствии со спецификацией OSI, HTTP является протоколом прикладного (верхнего, 7-го) уровня.

API многих программных продуктов также подразумевает использование HTTP для передачи данных — сами данные при этом могут иметь любой формат, например, XML или JSON.

Как правило, передача данных по протоколу HTTP осуществляется через TCP/IP-соединения. Серверное программное обеспечение при этом обычно использует TCP-порт 80 (и, если порт не указан явно, то обычно клиентское программное обеспечение по умолчанию использует именно 80-й порт для открываемых HTTP-соединений), хотя может использовать и любой другой.

=== Сетевая модель OSI
Сетевая модель OSI (Open Systems Interconnection, модель взаимодействия открытых систем) — это концептуальная модель, которая описывает и стандартизирует функции сетевой связи между различными системами или устройствами в сети. Модель была разработана Международной организацией по стандартизации (ISO) в 1984 году и включает семь уровней, каждый из которых выполняет определенные функции и взаимодействует с другими уровнями.

image::OSI.png[]

Вот краткое описание каждого уровня:

1. Физический уровень (Physical Layer):
    ** Отвечает за передачу необработанных битов по физическому каналу связи.
    ** Определяет электрические, механические и функциональные характеристики оборудования.
    ** Примеры: кабели, разъемы, электрические сигналы.

2. Канальный уровень (Data Link Layer):
    ** Отвечает за передачу необработанных битов по физическому каналу связи.
    ** Определяет электрические, механические и функциональные характеристики оборудования.
    ** Примеры: кабели, разъемы, электрические сигналы.

3. Сетевой уровень (Network Layer):
    ** Отвечает за определение маршрута передачи данных между устройствами в сети.
    ** Обеспечивает логическую адресацию и маршрутизацию данных.
    ** Примеры: IP (Internet Protocol), маршрутизаторы.

4. Транспортный уровень (Transport Layer):
    ** Обеспечивает надежную передачу данных между узлами сети.
    ** Осуществляет сегментацию и восстановление данных, контроль за порядком доставки и управление потоком.
    ** Примеры: TCP (Transmission Control Protocol), UDP (User Datagram Protocol).

5. Сеансовый уровень (Session Layer):
    ** Управляет сессиями связи между приложениями.
    ** Осуществляет установку, поддержку и завершение сеансов.
    ** Примеры: протоколы управления сеансами (NetBIOS, RPC).

6. Представительский уровень (Presentation Layer):
    ** Отвечает за преобразование данных в формат, понятный приложению.
    ** Выполняет кодирование, дешифрование, сжатие и расжатие данных.
    ** Примеры: SSL/TLS, шифрование данных.

7. Прикладной уровень (Application Layer):
    ** Предоставляет интерфейсы и средства для взаимодействия приложений с сетью.
    ** Осуществляет поддержку протоколов прикладного уровня.
    ** Примеры: HTTP, FTP, SMTP, DNS.

Каждый уровень модели OSI имеет свои задачи и функции, которые обеспечивают совместимость и взаимодействие сетевых устройств и программного обеспечения. Модель OSI помогает стандартизировать сетевые коммуникации и обеспечивает основу для разработки и понимания сетевых технологий.

=== Архитектура HTTP
HTTP функционирует по принципу клиент-сервер. Клиенты (например, веб-браузеры) отправляют запросы к серверам, которые затем отвечают на эти запросы. Процесс включает следующие шаги:

1. Клиент отправляет запрос:

    ** Клиент формирует HTTP-запрос и отправляет его на сервер.
    ** Запрос включает метод HTTP (например, GET или POST), URL, версию протокола, заголовки и, в некоторых случаях, тело запроса.

2. Сервер обрабатывает запрос:
    ** Сервер получает запрос, обрабатывает его, извлекает необходимые ресурсы и формирует ответ.

3. Сервер отправляет ответ:
    ** Ответ включает код состояния, заголовки и тело ответа (например, HTML-документ, изображение и т.д.).


=== Методы HTTP
HTTP поддерживает несколько методов запросов, наиболее распространенные из которых включают:

    GET: Запрашивает данные из указанного ресурса. Не должен изменять состояние сервера. Идемпотентен - при повторном обращении к сервере давает тот же результат.
    POST: Отправляет данные на сервер для обработки. Обычно используется для отправки форм. Неидемпотентен
    PUT: Загружает содержимое на указанный ресурс, заменяя его. Идемпотентен.
    DELETE: Удаляет указанный ресурс.
    HEAD: Запрашивает только заголовки ответа без тела.
    OPTIONS: Запрашивает разрешенные методы для конкретного ресурса.
    PATCH: Частично обновляет указанный ресурс.


=== Коды состояния HTTP
Коды состояния HTTP сообщают о результате запроса. Они состоят из трех цифр и делятся на пять категорий:

    1xx (Информационные): Запрос получен, продолжается обработка.
    2xx (Успешные): Запрос успешно обработан. Пример: 200 OK.
    3xx (Перенаправления): Необходимы дополнительные действия для завершения запроса. Пример: 301 Moved Permanently.
    4xx (Ошибки клиента): Ошибка на стороне клиента. Пример: 404 Not Found.
    5xx (Ошибки сервера): Ошибка на стороне сервера. Пример: 500 Internal Server Error.

=== Версии HTTP
Существует несколько версий HTTP:

    HTTP/0.9: Первая версия, поддерживающая только GET-запросы.
    HTTP/1.0: Ввел поддержку дополнительных методов и заголовков.
    HTTP/1.1: Наиболее широко используемая версия, ввела постоянные соединения, усовершенствованные кэширование и дополнительные методы.
    HTTP/2: Ввел бинарный формат, мультиплексирование запросов и заголовков, улучшенную производительность.
    HTTP/3: Использует протокол QUIC на основе UDP для улучшенной производительности и надежности.

Основными плюсами перехода на QUIC является встроенное шифрование и производительность.

=== Чем отличается HTTP от HTTPS
HTTP (Hypertext Transfer Protocol) и HTTPS (Hypertext Transfer Protocol Secure) — это протоколы передачи данных, используемые в интернете для взаимодействия между клиентами и серверами. Основное различие между ними заключается в уровне безопасности и способе передачи данных.

==== Основные различия между HTTP и HTTPS
1. Безопасность:
    ** HTTP: Данные передаются в незашифрованном виде. Это делает их уязвимыми для перехвата и чтения злоумышленниками, что может привести к утечке конфиденциальной информации.
    ** HTTPS: Данные передаются в зашифрованном виде с использованием TLS (Transport Layer Security). Шифрование обеспечивает конфиденциальность и целостность данных, защищая их от перехвата и изменения.

2. Порт:
    ** HTTP: Использует порт 80 для передачи данных.
    ** HTTPS: Использует порт 443 для передачи данных. Это стандартный порт для защищенных соединений.

3. Цифровые сертификаты:
    ** HTTP: Не требует цифровых сертификатов для работы.
    ** HTTPS: Требует цифровой сертификат, выданный доверенным центром сертификации (CA). Сертификат подтверждает подлинность веб-сайта и обеспечивает шифрование соединения.

4. URL:
    ** HTTP: URL-адреса начинаются с "http://".
    ** HTTPS: URL-адреса начинаются с "https://". Наличие "s" указывает на использование защищенного протокола.

5. SEO и доверие пользователей:
    ** HTTP: Сайты, использующие HTTP, могут быть помечены браузерами как "незащищенные". Это может снизить доверие пользователей и негативно повлиять на посещаемость сайта.
    ** HTTPS: Поисковые системы, такие как Google, предпочитают сайты, использующие HTTPS, и могут повышать их рейтинг в результатах поиска. Также пользователи больше доверяют сайтам с HTTPS.

6. Производительность:
    ** HTTP: Не имеет накладных расходов на шифрование и дешифрование данных.
    ** HTTPS: Немного более ресурсозатратен из-за процессов шифрования и дешифрования. Однако современные технологии, такие как HTTP/2 и QUIC, помогают минимизировать эти накладные расходы и улучшить производительность.

=== Преимущества использования HTTPS
1. Конфиденциальность: Шифрование защищает данные от перехвата третьими лицами.
2. Целостность данных: Шифрование предотвращает изменения данных при передаче.
3. Аутентификация: Цифровые сертификаты подтверждают подлинность веб-сайта, защищая пользователей от фишинговых атак.
4. SEO: Использование HTTPS может улучшить позиции сайта в результатах поиска.
5. Доверие пользователей: Пользователи больше доверяют сайтам, которые используют HTTPS, что может увеличить трафик и конверсию.

=== Процесс установления HTTPS-соединения
Процесс установления HTTPS-соединения включает несколько шагов:

1. Инициация соединения:
    ** Клиент отправляет запрос к серверу, указывая, что он хочет установить защищенное соединение.

2. Согласование параметров соединения (TLS Handshake):
    ** Client Hello: Клиент отправляет серверу сообщение "Client Hello", содержащее версии поддерживаемых протоколов TLS, наборы шифров и случайное число (nonce).
    ** Server Hello: Сервер отвечает сообщением "Server Hello", в котором указывает выбранную версию TLS, набор шифров и своё случайное число (nonce).
    ** Сертификат сервера: Сервер отправляет свой цифровой сертификат, который подтверждает его подлинность. Сертификат содержит открытый ключ сервера и подписан доверенным центром сертификации (CA).
    ** Ключи шифрования: Клиент и сервер используют алгоритмы обмена ключами (например, RSA или Diffie-Hellman), чтобы сгенерировать общую сессионную ключевую информацию, которая будет использоваться для симметричного шифрования данных.

3. Установление защищенного соединения:
    ** Проверка сертификата: Клиент проверяет подлинность сертификата сервера с помощью цепочки доверия до корневого центра сертификации.
    ** Генерация сессионных ключей: Клиент и сервер используют обменянные параметры для создания симметричных ключей шифрования, которые будут использоваться для шифрования данных в ходе сессии.
    ** Заключительное подтверждение: Клиент и сервер завершают handshake, обменявшись сообщениями, подтверждающими успешное установление защищенного соединения.

4. Передача данных:
    ** После установления защищенного соединения все данные, передаваемые между клиентом и сервером, шифруются с использованием сессионных ключей. Это обеспечивает конфиденциальность и целостность данных.