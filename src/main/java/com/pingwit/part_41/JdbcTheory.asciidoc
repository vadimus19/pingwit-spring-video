=== JDBC
JDBC API (Java Database Connectivity) - это интерфейсы и классы, определенные в Java для работы с базами данных.

JDBC API предоставляет интерфейсы для выполнения SQL запросов к базе данных. Объекты Statement и PreparedStatement используются для отправки SQL запросов и получения результатов и имеют свои особенности и преимущества.

==== JDBC Statement:

* Объект Statement используется для выполнения статических SQL запросов без параметров.
* При использовании Statement SQL запрос компилируется и выполняется непосредственно в базе данных при каждом вызове execute() или executeQuery().
* Параметры запроса (например, значения, вставляемые в SQL запрос) не могут быть динамически переданы в Statement, что делает его уязвимым к SQL инъекциям, если данные поступают от пользователя.

=== JDBC PreparedStatement:

* Объект PreparedStatement используется для выполнения динамических SQL запросов с параметрами.
* При создании PreparedStatement SQL запрос компилируется на стороне базы данных один раз,
и в запросе могут быть указаны параметры, которые будут заполнены при выполнении.
* Параметры запроса передаются безопасным образом и защищены от SQL инъекций.
* PreparedStatement может быть многократно использован для выполнения одного и того же SQL запроса с разными параметрами, что улучшает производительность.

=== JDBC методы
* executeQuery() - для SELECT запросов
* executeUpdate() - для обновления данных и таблиц
* execute() - может использоваться и для SELECT и для обновлений


=== Пример SQL инъекции

Предположим, ваше приложение позволяет пользователям искать пользователей в базе данных по имени:

[source, java]
----
public ResultSet searchUser(String name) throws SQLException {
    Statement stmt = connection.createStatement();
    String query = "SELECT * FROM users WHERE name = '" + name + "'";

    return stmt.executeQuery(query);
}
----

В этом примере параметр name, введенный пользователем, включается непосредственно в SQL запрос без какой-либо проверки или экранирования. Если злоумышленник введет следующую строку в качестве имени: *' OR '1'='1*, то SQL запрос станет таким:

[source,java]
----
SELECT * FROM users WHERE name = '' OR '1'='1'
----

Это приведет к тому, что запрос вернет все записи из таблицы users, так как условие *'1'='1'* всегда истинно. Таким образом, злоумышленник получит доступ ко всем данным в таблице users, что может быть критической уязвимостью для безопасности приложения.

Чтобы предотвратить SQL инъекции, вместо Statement лучше использовать *PreparedStatement*, который позволяет передавать параметры безопасным образом:

[source,java]
----
public ResultSet searchUser(String name) throws SQLException {
    String query = "SELECT * FROM users WHERE name = ?";
    PreparedStatement pstmt = connection.prepareStatement(query);
    pstmt.setString(1, name);

    return pstmt.executeQuery();
}
----

При использовании PreparedStatement параметр name будет безопасно экранирован, что предотвратит возможность SQL инъекции.